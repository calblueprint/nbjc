generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int       @id @default(autoincrement())
  compoundId        String    @unique @map("compound_id") @db.VarChar(255)
  userId            Int       @map("user_id")
  providerType      String    @map("provider_type") @db.VarChar(255)
  providerId        String    @map("provider_id") @db.VarChar(255)
  providerAccountId String    @map("provider_account_id") @db.VarChar(255)
  refreshToken      String?   @map("refresh_token")
  accessToken       String?   @map("access_token")
  accessTokenExpire DateTime? @map("access_token_expires") @db.Timestamptz(6)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([providerAccountId], name: "provider_account_id")
  @@index([providerId], name: "provider_id")
  @@index([userId], name: "user_id")
  @@map("accounts")
}

model Organization {
  id                   Int                   @id @default(autoincrement())
  name                 String?               @db.VarChar(255)
  long                 Decimal?              @db.Decimal
  lat                  Decimal?              @db.Decimal
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  applicationStatus    ApplicationStatus     @default(draft) @map("application_status")
  active               Boolean               @default(false)
  contactName          String?               @map("contact_name") @db.VarChar(255)
  contactEmail         String?               @map("contact_email") @db.VarChar(255)
  organizationType     OrganizationType?     @map("organization_type")
  workType             WorkType?             @map("work_type")
  address              String?               @db.VarChar(255)
  missionStatement     String?               @map("mission_statement")
  shortHistory         String?               @map("short_history")
  lgbtqDemographic     LgbtqDemographic[]    @map("lgbtq_demographic")
  raceDemographic      RaceDemographic[]     @map("race_demographic")
  ageDemographic       AgeDemographic[]      @map("age_demographic")
  capacity             Int?
  ein                  String?               @db.VarChar(255)
  foundingDate         DateTime?             @map("founding_date") @db.Date
  is501c3              Boolean               @default(false) @map("is_501c3")
  userId               Int?                  @unique @map("user_id")
  contactPhone         String?               @map("contact_phone") @db.VarChar(255)
  website              String?               @db.VarChar(255)
  user                 User?                 @relation("OrganizationsToUsers", fields: [userId], references: [id])
  applicationNote      ApplicationNote?      @relation("ApplicationNotesToOrganizations")
  applicationResponses ApplicationResponse[] @relation("ApplicationResponsesToOrganizations")
  organizationProjects OrganizationProject[] @relation("OrganizationProjectsToOrganizations")

  @@map("organizations")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expire       DateTime @map("expires") @db.Timestamptz(6)
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  accessToken  String   @unique @map("access_token") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("sessions")
}

model User {
  id             Int           @id @default(autoincrement())
  role           UserRole?
  email          String        @unique @db.VarChar(255)
  emailVerified  DateTime?     @map("email_verified") @db.Timestamptz(6)
  image          String?       @db.VarChar(255)
  hashedPassword String        @map("hashed_password") @db.VarChar(255)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  organization   Organization? @relation("OrganizationsToUsers")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expire     DateTime @map("expires") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("verification_requests")
}

model ApplicationQuestion {
  id                   Int                   @id @default(autoincrement())
  question             String                @db.VarChar(255)
  hint                 String?
  placeholder          String?
  required             Boolean               @default(false)
  wordLimit            Int?                  @map("word_limit")
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  applicationResponses ApplicationResponse[] @relation("ApplicationQuestionsToApplicationResponses")

  @@map("application_questions")
}

model ApplicationResponse {
  id                  Int                 @id @default(autoincrement())
  answer              String
  questionId          Int                 @map("question_id")
  organizationId      Int                 @map("organization_id")
  createdAt           DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  organization        Organization        @relation("ApplicationResponsesToOrganizations", fields: [organizationId], references: [id])
  applicationQuestion ApplicationQuestion @relation("ApplicationQuestionsToApplicationResponses", fields: [questionId], references: [id])

  @@map("application_responses")
}

model migrations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  run_on DateTime @db.Timestamp(6)
}

model ApplicationNote {
  id             Int          @id @default(autoincrement())
  note           String?
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  organizationId Int          @unique @map("organization_id")
  organization   Organization @relation("ApplicationNotesToOrganizations", fields: [organizationId], references: [id])

  @@map("application_notes")
}

model OrganizationProject {
  id             Int          @id @default(autoincrement())
  title          String
  description    String?
  organizationId Int          @map("organization_id")
  organization   Organization @relation("OrganizationProjectsToOrganizations", fields: [organizationId], references: [id])

  @@map("organization_projects")
}

enum AgeDemographic {
  child   @map("Children")
  teen    @map("Teens")
  adult   @map("Adults")
  senior  @map("Seniors")

  @@map("age_demographic")
}

enum ApplicationStatus {
  draft
  submitted
  approved
  rejected

  @@map("application_status")
}

enum LgbtqDemographic {
  queer                 @map("Queer")
  asexualAromantic      @map("Asexual/Aromantic")
  bisexual              @map("Bisexual")
  pansexual             @map("Pansexual")
  lesbianSgl            @map("Lesbian/SGL")
  gaySgl                @map("Gay/SGL")
  straightHeterosexual  @map("Straight/Heterosexual")
  other                 @map("Other")

  @@map("lgbtq_demographic")
}

enum OrganizationType {
  grassrootsLocal  @map("Grassroots/Local")
  statewide        @map("Statewide")
  national         @map("National")
  other            @map("Other")

  @@map("organization_type")
}

enum RaceDemographic {
  black     @map("Black")
  native    @map("Native")
  hispanic  @map("Hispanic")
  asian     @map("Asian")
  arab      @map("Arab")
  white     @map("White")
  other     @map("Other")

  @@map("race_demographic")
}

enum UserRole {
  organization
  moderator
  admin

  @@map("user_role")
}

enum WorkType {
  advocacy          @map("Advocacy")
  directService     @map("Direct Service")
  networkingSocial  @map("Networking/Social")

  @@map("work_type")
}
