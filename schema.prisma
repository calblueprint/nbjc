datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"


}

model Account {
  id                Int       @id @default(autoincrement())
  compoundId        String    @unique
  userId            Int
  providerType      String
  providerId        String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  accessTokenExpire DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt


  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expire       DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt


  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String?
  lastName      String?
  role          UserRole?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt


  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expire     DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt


  @@map("verification_requests")
}

model Migration {
  id    Int      @id @default(autoincrement())
  name  String
  runOn DateTime @map("run_on")


  @@map("migrations")
}

model Organization {
  id                      Int                      @id @default(autoincrement())
  name                    String
  long                    Float?
  lat                     Float?
  type                    String?
  organizationApplication OrganizationApplication? @relation(name: "organization_applicationsToorganizations")


  @@map("organizations")
}

model OrganizationApplication {
  id                Int               @id @default(autoincrement())
  applicationStatus ApplicationStatus
  organizationId    Int               @unique @map("organization_id")
  organizationName  String
  contactName       String?
  contactEmail      String?
  organizationType  OrganizationType
  workType          WorkType
  address           String
  lat               Float
  long              Float
  missionStatement  String?
  shortHistory      String?
  keyValue          String?
  lgbtqDemographic  LgbtqDemographic
  raceDemographic   RaceDemographic
  ageDemographic    AgeDemographic
  capacity          Int?
  ein               Int
  foundingDate      DateTime
  organization      Organization      @relation(name: "organization_applicationsToorganizations", fields: [organizationId], references: [id])


  @@map("organization_applications")
}

enum UserRole {
  admin
  moderator
  organization

  @@map("user_role")
}

enum AgeDemographic {
  adult   @map("Adults")
  child   @map("Children")
  senior  @map("Seniors")
  teen    @map("Teens")

  @@map("age_demographic")
}

enum ApplicationStatus {
  approved
  draft
  rejected
  submitted

  @@map("application_status")
}

enum LgbtqDemographic {
  asexualAromantic  @map("Asexual/Aromantic")
  lgbtqAll          @map("LGBTQ+ (All)")
  other             @map("Other")
  sgl               @map("SGL")
  transgender       @map("Transgender")

  @@map("lgbtq_demographic")
}

enum OrganizationType {
  c3               @map("510(c)(3)")
  grassrootsLocal  @map("Grassroots/Local")
  national         @map("National")
  other            @map("Other")
  statewide        @map("Statewide")

  @@map("organization_type")
}

enum RaceDemographic {
  asian              @map("Asian")
  black              @map("Black")
  latinx             @map("Latinx")
  nativeIndigeneous  @map("Native/Indigeneous")
  other              @map("Other")
  pocAll             @map("POC (All)")
  pacificIslander    @map("Pacific Islander")

  @@map("race_demographic")
}

enum WorkType {
  advocacy          @map("Advocacy")
  directService     @map("Direct Service")
  networkingSocial  @map("Networking/Social")

  @@map("work_type")
}
