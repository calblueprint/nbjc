generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                   Int       @id @default(autoincrement())
  compound_id          String    @unique
  user_id              Int
  provider_type        String
  provider_id          String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  access_token_expires DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())

  @@index([provider_account_id], name: "provider_account_id")
  @@index([provider_id], name: "provider_id")
  @@index([user_id], name: "user_id")
  @@map("accounts")
}

model Session {
  id            Int      @id @default(autoincrement())
  user_id       Int
  expires       DateTime
  session_token String   @unique
  access_token  String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  @@map("sessions")
}

model User {
  id             Int       @id @default(autoincrement())
  first_name     String?
  last_name      String?
  role           UserRole?
  email          String?   @unique
  email_verified DateTime?
  image          String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("verification_requests")
}

model Migration {
  id    Int      @id @default(autoincrement())
  name  String
  runOn DateTime @map("run_on")

  @@map("migrations")
}

model Organization {
  id                      Int                      @id @default(autoincrement())
  name                    String
  long                    Float?
  lat                     Float?
  type                    String?
  organizationApplication OrganizationApplication? @relation("organization_applicationsToorganizations")

  @@map("organizations")
}

model OrganizationApplication {
  id                 Int               @id @default(autoincrement())
  application_status ApplicationStatus @map("applicationStatus")
  organizationId     Int               @unique @map("organization_id")
  organization_name  String
  contact_name       String?
  contact_email      String?
  organization_type  OrganizationType
  work_type          WorkType
  address            String
  lat                Float
  long               Float
  mission_statement  String?
  short_history      String?
  key_values         String?
  lgbtq_demographic  LgbtqDemographic
  race_demographic   RaceDemographic
  age_demographic    AgeDemographic
  capacity           Int?
  ein                Int
  founding_date      DateTime
  organization       Organization      @relation("organization_applicationsToorganizations", fields: [organizationId], references: [id])

  @@map("organization_applications")
}

enum UserRole {
  admin
  moderator
  organization

  @@map("user_role")
}

enum AgeDemographic {
  adult   @map("Adults")
  child   @map("Children")
  senior  @map("Seniors")
  teen    @map("Teens")

  @@map("age_demographic")
}

enum ApplicationStatus {
  approved
  draft
  rejected
  submitted

  @@map("applicationStatus")
}

enum LgbtqDemographic {
  asexualAromantic  @map("Asexual/Aromantic")
  lgbtqAll          @map("LGBTQ+ (All)")
  other             @map("Other")
  sgl               @map("SGL")
  transgender       @map("Transgender")

  @@map("lgbtq_demographic")
}

enum OrganizationType {
  c3               @map("510(c)(3)")
  grassrootsLocal  @map("Grassroots/Local")
  national         @map("National")
  other            @map("Other")
  statewide        @map("Statewide")

  @@map("organization_type")
}

enum RaceDemographic {
  asian              @map("Asian")
  black              @map("Black")
  latinx             @map("Latinx")
  nativeIndigeneous  @map("Native/Indigeneous")
  other              @map("Other")
  pocAll             @map("POC (All)")
  pacificIslander    @map("Pacific Islander")

  @@map("race_demographic")
}

enum WorkType {
  advocacy          @map("Advocacy")
  directService     @map("Direct Service")
  networkingSocial  @map("Networking/Social")

  @@map("work_type")
}
